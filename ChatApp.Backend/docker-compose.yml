version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chatapp-postgres
    environment:
      POSTGRES_DB: chatappdb
      POSTGRES_USER: chatappuser
      POSTGRES_PASSWORD: yourpassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatappuser -d chatappdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatapp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChatApp Backend API
  chatapp-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatapp-backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=chatappdb;Username=chatappuser;Password=yourpassword
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=your-super-secure-secret-key-change-this-in-production-32-chars-minimum
      - JwtSettings__Issuer=ChatApp.Backend
      - JwtSettings__Audience=ChatApp.Frontend
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - chatapp-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local

networks:
  chatapp-network:
    driver: bridge
