name: ChatApp Backend CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/chatapp-backend

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: chatapp_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore ChatApp.Backend/ChatApp.Backend.csproj

    - name: Build application
      run: dotnet build ChatApp.Backend/ChatApp.Backend.csproj --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test ChatApp.Backend.Tests/ChatApp.Backend.Tests.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=chatapp_test;Username=testuser;Password=testpass"
        ConnectionStrings__Redis: "localhost:6379"
        JwtSettings__SecretKey: "test-secret-key-for-ci-cd-pipeline-32-characters-minimum"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

    - name: Publish application
      run: dotnet publish ChatApp.Backend/ChatApp.Backend.csproj --configuration Release --output ./publish --no-build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chatapp-backend
        path: ./publish/

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './ChatApp.Backend'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Push Job
  docker-build-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ChatApp.Backend
        file: ./ChatApp.Backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Azure Container Apps (if configured)
  deploy-azure:
    runs-on: ubuntu-latest
    needs: docker-build-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Apps
      run: |
        echo "Deploy to Azure Container Apps"
        # Add your Azure deployment commands here
        # az containerapp update --name chatapp-backend --resource-group chatapp-rg --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, docker-build-push]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.build-and-test.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ Pipeline succeeded! All jobs completed successfully."
        
    - name: Notify on failure
      if: ${{ needs.build-and-test.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed! Check the logs for details."
        exit 1
